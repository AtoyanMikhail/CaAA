import timeit
from math import inf
from mst_dfs_algorithm import ApproximateTSP

def generate_symmetric_matrix(size):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã —Å –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏–º–∏ –≤–µ—Å–∞–º–∏"""
    matrix = [[inf] * size for _ in range(size)]
    for i in range(size):
        for j in range(i+1, size):
            matrix[i][j] = matrix[j][i] = (i + j) * 10
    return matrix

def benchmark_case(matrix, start=0, iterations=5):
    """–ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã"""
    stmt = f'ApproximateTSP({matrix}, {start}).solve()'
    setup = 'from __main__ import ApproximateTSP; from math import inf'
    times = timeit.repeat(stmt, setup, number=1, repeat=iterations)
    return min(times), sum(times)/iterations, max(times)

def print_results(size, results):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print(f"\n{'–†–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã':^17}|{'–ú–∏–Ω–∏–º—É–º':^14}|{'–°—Ä–µ–¥–Ω–µ–µ':^14}|{'–ú–∞–∫—Å–∏–º—É–º':^14}")
    print(f"{'-'*17}|{'-'*14}|{'-'*14}|{'-'*14}")
    print(f"{size:^17}|{results[0]:^12.8f}s |{results[1]:^12.8f}s |{results[2]:^12.8f}s")

def run_benchmarks():
    """–ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Ç—Ä–∏—Ü —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤"""
    test_cases = {
        10: generate_symmetric_matrix(10),
        20: generate_symmetric_matrix(20),
        50: generate_symmetric_matrix(50),
        100: generate_symmetric_matrix(100),
        200: generate_symmetric_matrix(200)
    }

    sizes = []
    avg_times = []
    
    for size, matrix in test_cases.items():
        results = benchmark_case(matrix, iterations=5)
        print_results(size, results)
        sizes.append(size)
        avg_times.append(results[1])

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ TSP")
    run_benchmarks()
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")